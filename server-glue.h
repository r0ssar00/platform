
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__server_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__server_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace com {
namespace ross {
namespace XTagRev {

class TagDB_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    TagDB_adaptor()
    : ::DBus::InterfaceAdaptor("com.ross.XTagRev.TagDB")
    {
        register_method(TagDB_adaptor, AddTag, _AddTag_stub);
        register_method(TagDB_adaptor, RmTag, _RmTag_stub);
        register_method(TagDB_adaptor, LoadTags, _LoadTags_stub);
        register_method(TagDB_adaptor, GetTagNames, _GetTagNames_stub);
        register_method(TagDB_adaptor, GetTagSizes, _GetTagSizes_stub);
        register_method(TagDB_adaptor, ForceReloadTagDB, _ForceReloadTagDB_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument AddTag_args[] = 
        {
            { "tagname", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RmTag_args[] = 
        {
            { "tagname", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument LoadTags_args[] = 
        {
            { "filename", "s", true },
            { "success", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetTagNames_args[] = 
        {
            { "stream", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetTagSizes_args[] = 
        {
            { "stream", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ForceReloadTagDB_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ReloadTagDB_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod TagDB_adaptor_methods[] = 
        {
            { "AddTag", AddTag_args },
            { "RmTag", RmTag_args },
            { "LoadTags", LoadTags_args },
            { "GetTagNames", GetTagNames_args },
            { "GetTagSizes", GetTagSizes_args },
            { "ForceReloadTagDB", ForceReloadTagDB_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod TagDB_adaptor_signals[] = 
        {
            { "ReloadTagDB", ReloadTagDB_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty TagDB_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface TagDB_adaptor_interface = 
        {
            "com.ross.XTagRev.TagDB",
            TagDB_adaptor_methods,
            TagDB_adaptor_signals,
            TagDB_adaptor_properties
        };
        return &TagDB_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void AddTag(const std::string& tagname) = 0;
    virtual void RmTag(const std::string& tagname) = 0;
    virtual bool LoadTags(const std::string& filename) = 0;
    virtual std::vector< std::string > GetTagNames() = 0;
    virtual std::vector< std::string > GetTagSizes() = 0;
    virtual void ForceReloadTagDB() = 0;

public:

    /* signal emitters for this interface
     */
    void ReloadTagDB()
    {
        ::DBus::SignalMessage sig("ReloadTagDB");
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _AddTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        AddTag(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _RmTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        RmTag(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _LoadTags_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = LoadTags(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetTagNames_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = GetTagNames();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetTagSizes_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = GetTagSizes();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ForceReloadTagDB_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ForceReloadTagDB();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
namespace com {
namespace ross {

class platform_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    platform_adaptor()
    : ::DBus::InterfaceAdaptor("com.ross.platform")
    {
        register_method(platform_adaptor, GetTag, _GetTag_stub);
        register_method(platform_adaptor, GetTags, _GetTags_stub);
        register_method(platform_adaptor, SetTag, _SetTag_stub);
        register_method(platform_adaptor, AddTag, _AddTag_stub);
        register_method(platform_adaptor, RmTag, _RmTag_stub);
        register_method(platform_adaptor, Query, _Query_stub);
        register_method(platform_adaptor, ExecuteQuery, _ExecuteQuery_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument GetTag_args[] = 
        {
            { "filename", "s", true },
            { "ret", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetTags_args[] = 
        {
            { "filename", "s", true },
            { "ret", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetTag_args[] = 
        {
            { "filename", "s", true },
            { "tag", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AddTag_args[] = 
        {
            { "filename", "s", true },
            { "tag", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RmTag_args[] = 
        {
            { "filename", "s", true },
            { "tag", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Query_args[] = 
        {
            { "query", "s", true },
            { "throttle", "b", true },
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ExecuteQuery_args[] = 
        {
            { "query", "s", true },
            { "throttle", "b", true },
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod platform_adaptor_methods[] = 
        {
            { "GetTag", GetTag_args },
            { "GetTags", GetTags_args },
            { "SetTag", SetTag_args },
            { "AddTag", AddTag_args },
            { "RmTag", RmTag_args },
            { "Query", Query_args },
            { "ExecuteQuery", ExecuteQuery_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod platform_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty platform_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface platform_adaptor_interface = 
        {
            "com.ross.platform",
            platform_adaptor_methods,
            platform_adaptor_signals,
            platform_adaptor_properties
        };
        return &platform_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string GetTag(const std::string& filename) = 0;
    virtual std::vector< std::string > GetTags(const std::string& filename) = 0;
    virtual int32_t SetTag(const std::string& filename, const std::string& tag) = 0;
    virtual int32_t AddTag(const std::string& filename, const std::string& tag) = 0;
    virtual int32_t RmTag(const std::string& filename, const std::string& tag) = 0;
    virtual std::vector< std::string > Query(const std::string& query, const bool& throttle) = 0;
    virtual std::vector< std::string > ExecuteQuery(const std::string& query, const bool& throttle) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = GetTag(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetTags_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = GetTags(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        int32_t argout1 = SetTag(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _AddTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        int32_t argout1 = AddTag(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _RmTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        int32_t argout1 = RmTag(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Query_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        std::vector< std::string > argout1 = Query(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ExecuteQuery_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        std::vector< std::string > argout1 = ExecuteQuery(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
namespace com {
namespace ross {

class filesystem_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    filesystem_adaptor()
    : ::DBus::InterfaceAdaptor("com.ross.filesystem")
    {
        register_method(filesystem_adaptor, Cat, _Cat_stub);
        register_method(filesystem_adaptor, Rm, _Rm_stub);
        register_method(filesystem_adaptor, RmDir, _RmDir_stub);
        register_method(filesystem_adaptor, Ls, _Ls_stub);
        register_method(filesystem_adaptor, MkDir, _MkDir_stub);
        register_method(filesystem_adaptor, Cp, _Cp_stub);
        register_method(filesystem_adaptor, CpDir, _CpDir_stub);
        register_method(filesystem_adaptor, Touch, _Touch_stub);
        register_method(filesystem_adaptor, Find, _Find_stub);
        register_method(filesystem_adaptor, FindFiles, _FindFiles_stub);
        register_method(filesystem_adaptor, FindFolders, _FindFolders_stub);
        register_method(filesystem_adaptor, Basename, _Basename_stub);
        register_method(filesystem_adaptor, Exists, _Exists_stub);
        register_method(filesystem_adaptor, GetLinkType, _GetLinkType_stub);
        register_method(filesystem_adaptor, MakeAlias, _MakeAlias_stub);
        register_method(filesystem_adaptor, ResolveAlias, _ResolveAlias_stub);
        register_method(filesystem_adaptor, LinkGroup, _LinkGroup_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument Cat_args[] = 
        {
            { "filename", "s", true },
            { "contents", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Rm_args[] = 
        {
            { "filename", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RmDir_args[] = 
        {
            { "foldername", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Ls_args[] = 
        {
            { "foldername", "s", true },
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument MkDir_args[] = 
        {
            { "foldername", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Cp_args[] = 
        {
            { "filefrom", "s", true },
            { "fileto", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CpDir_args[] = 
        {
            { "folderfrom", "s", true },
            { "folderto", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Touch_args[] = 
        {
            { "filename", "s", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Find_args[] = 
        {
            { "foldername", "s", true },
            { "throttle", "b", true },
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument FindFiles_args[] = 
        {
            { "foldername", "s", true },
            { "throttle", "b", true },
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument FindFolders_args[] = 
        {
            { "foldername", "s", true },
            { "throttle", "b", true },
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Basename_args[] = 
        {
            { "itemname", "s", true },
            { "basename", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Exists_args[] = 
        {
            { "itemname", "s", true },
            { "result", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetLinkType_args[] = 
        {
            { "itemname", "s", true },
            { "linktype", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument MakeAlias_args[] = 
        {
            { "from", "s", true },
            { "to", "s", true },
            { "kind", "s", true },
            { "return", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ResolveAlias_args[] = 
        {
            { "path", "s", true },
            { "resolved", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument LinkGroup_args[] = 
        {
            { "from", "as", true },
            { "to", "as", true },
            { "kind", "as", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod filesystem_adaptor_methods[] = 
        {
            { "Cat", Cat_args },
            { "Rm", Rm_args },
            { "RmDir", RmDir_args },
            { "Ls", Ls_args },
            { "MkDir", MkDir_args },
            { "Cp", Cp_args },
            { "CpDir", CpDir_args },
            { "Touch", Touch_args },
            { "Find", Find_args },
            { "FindFiles", FindFiles_args },
            { "FindFolders", FindFolders_args },
            { "Basename", Basename_args },
            { "Exists", Exists_args },
            { "GetLinkType", GetLinkType_args },
            { "MakeAlias", MakeAlias_args },
            { "ResolveAlias", ResolveAlias_args },
            { "LinkGroup", LinkGroup_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod filesystem_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty filesystem_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface filesystem_adaptor_interface = 
        {
            "com.ross.filesystem",
            filesystem_adaptor_methods,
            filesystem_adaptor_signals,
            filesystem_adaptor_properties
        };
        return &filesystem_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< std::string > Cat(const std::string& filename) = 0;
    virtual int32_t Rm(const std::string& filename) = 0;
    virtual int32_t RmDir(const std::string& foldername) = 0;
    virtual std::vector< std::string > Ls(const std::string& foldername) = 0;
    virtual int32_t MkDir(const std::string& foldername) = 0;
    virtual int32_t Cp(const std::string& filefrom, const std::string& fileto) = 0;
    virtual int32_t CpDir(const std::string& folderfrom, const std::string& folderto) = 0;
    virtual int32_t Touch(const std::string& filename) = 0;
    virtual std::vector< std::string > Find(const std::string& foldername, const bool& throttle) = 0;
    virtual std::vector< std::string > FindFiles(const std::string& foldername, const bool& throttle) = 0;
    virtual std::vector< std::string > FindFolders(const std::string& foldername, const bool& throttle) = 0;
    virtual std::string Basename(const std::string& itemname) = 0;
    virtual bool Exists(const std::string& itemname) = 0;
    virtual std::string GetLinkType(const std::string& itemname) = 0;
    virtual int32_t MakeAlias(const std::string& from, const std::string& to, const std::string& kind) = 0;
    virtual std::string ResolveAlias(const std::string& path) = 0;
    virtual void LinkGroup(const std::vector< std::string >& from, const std::vector< std::string >& to, const std::vector< std::string >& kind) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Cat_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = Cat(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Rm_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argout1 = Rm(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _RmDir_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argout1 = RmDir(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Ls_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::vector< std::string > argout1 = Ls(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _MkDir_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argout1 = MkDir(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Cp_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        int32_t argout1 = Cp(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _CpDir_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        int32_t argout1 = CpDir(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Touch_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argout1 = Touch(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Find_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        std::vector< std::string > argout1 = Find(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _FindFiles_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        std::vector< std::string > argout1 = FindFiles(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _FindFolders_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argin2; ri >> argin2;
        std::vector< std::string > argout1 = FindFolders(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Basename_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Basename(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Exists_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        bool argout1 = Exists(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetLinkType_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = GetLinkType(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _MakeAlias_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        std::string argin3; ri >> argin3;
        int32_t argout1 = MakeAlias(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ResolveAlias_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = ResolveAlias(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _LinkGroup_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argin1; ri >> argin1;
        std::vector< std::string > argin2; ri >> argin2;
        std::vector< std::string > argin3; ri >> argin3;
        LinkGroup(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
namespace com {
namespace ross {

class settings_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    settings_adaptor()
    : ::DBus::InterfaceAdaptor("com.ross.settings")
    {
        register_method(settings_adaptor, LoadSettings, _LoadSettings_stub);
        register_method(settings_adaptor, SaveSettings, _SaveSettings_stub);
        register_method(settings_adaptor, GetSetting, _GetSetting_stub);
        register_method(settings_adaptor, SetSetting, _SetSetting_stub);
        register_method(settings_adaptor, DeleteSetting, _DeleteSetting_stub);
        register_method(settings_adaptor, GetRaw, _GetRaw_stub);
        register_method(settings_adaptor, ForceReloadSettings, _ForceReloadSettings_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument LoadSettings_args[] = 
        {
            { "from", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SaveSettings_args[] = 
        {
            { "to", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSetting_args[] = 
        {
            { "key", "s", true },
            { "value", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetSetting_args[] = 
        {
            { "key", "s", true },
            { "value", "s", true },
            { "save", "b", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DeleteSetting_args[] = 
        {
            { "key", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRaw_args[] = 
        {
            { "amap", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ForceReloadSettings_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ReloadSettings_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod settings_adaptor_methods[] = 
        {
            { "LoadSettings", LoadSettings_args },
            { "SaveSettings", SaveSettings_args },
            { "GetSetting", GetSetting_args },
            { "SetSetting", SetSetting_args },
            { "DeleteSetting", DeleteSetting_args },
            { "GetRaw", GetRaw_args },
            { "ForceReloadSettings", ForceReloadSettings_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod settings_adaptor_signals[] = 
        {
            { "ReloadSettings", ReloadSettings_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty settings_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface settings_adaptor_interface = 
        {
            "com.ross.settings",
            settings_adaptor_methods,
            settings_adaptor_signals,
            settings_adaptor_properties
        };
        return &settings_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void LoadSettings(const std::string& from) = 0;
    virtual void SaveSettings(const std::string& to) = 0;
    virtual std::string GetSetting(const std::string& key) = 0;
    virtual void SetSetting(const std::string& key, const std::string& value, const bool& save) = 0;
    virtual void DeleteSetting(const std::string& key) = 0;
    virtual std::map< std::string, std::string > GetRaw() = 0;
    virtual void ForceReloadSettings() = 0;

public:

    /* signal emitters for this interface
     */
    void ReloadSettings()
    {
        ::DBus::SignalMessage sig("ReloadSettings");
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _LoadSettings_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        LoadSettings(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _SaveSettings_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        SaveSettings(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetSetting_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = GetSetting(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetSetting_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        bool argin3; ri >> argin3;
        SetSetting(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _DeleteSetting_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        DeleteSetting(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetRaw_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argout1 = GetRaw();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ForceReloadSettings_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ForceReloadSettings();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
namespace com {
namespace ross {

class logger_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    logger_adaptor()
    : ::DBus::InterfaceAdaptor("com.ross.logger")
    {
        register_method(logger_adaptor, Log, _Log_stub);
        register_method(logger_adaptor, Level, _Level_stub);
        register_method(logger_adaptor, GetLevel, _GetLevel_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument Log_args[] = 
        {
            { "who", "s", true },
            { "what", "s", true },
            { "level", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Level_args[] = 
        {
            { "level", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetLevel_args[] = 
        {
            { "level", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DoLog_args[] = 
        {
            { "who", "s", true },
            { "what", "s", true },
            { "level", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod logger_adaptor_methods[] = 
        {
            { "Log", Log_args },
            { "Level", Level_args },
            { "GetLevel", GetLevel_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod logger_adaptor_signals[] = 
        {
            { "DoLog", DoLog_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty logger_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface logger_adaptor_interface = 
        {
            "com.ross.logger",
            logger_adaptor_methods,
            logger_adaptor_signals,
            logger_adaptor_properties
        };
        return &logger_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void Log(const std::string& who, const std::string& what, const int32_t& level) = 0;
    virtual void Level(const int32_t& level) = 0;
    virtual int32_t GetLevel() = 0;

public:

    /* signal emitters for this interface
     */
    void DoLog(const std::string& arg1, const std::string& arg2, const int32_t& arg3)
    {
        ::DBus::SignalMessage sig("DoLog");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        wi << arg2;
        wi << arg3;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Log_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        int32_t argin3; ri >> argin3;
        Log(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Level_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        Level(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetLevel_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = GetLevel();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif//__dbusxx__server_glue_h__ADAPTOR_MARSHAL_H
