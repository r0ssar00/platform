
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__server_glue_h__ADAPTOR_MARSHAL_H
#define __dbusxx__server_glue_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace com {
namespace ross {
namespace XTagRev {

class TagDB_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    TagDB_adaptor()
    : ::DBus::InterfaceAdaptor("com.ross.XTagRev.TagDB")
    {
        register_method(TagDB_adaptor, AddTag, _AddTag_stub);
        register_method(TagDB_adaptor, RmTag, _RmTag_stub);
        register_method(TagDB_adaptor, GetTagNames, _GetTagNames_stub);
        register_method(TagDB_adaptor, GetTagSizes, _GetTagSizes_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument AddTag_args[] = 
        {
            { "tagname", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RmTag_args[] = 
        {
            { "tagname", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetTagNames_args[] = 
        {
            { "stream", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetTagSizes_args[] = 
        {
            { "stream", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod TagDB_adaptor_methods[] = 
        {
            { "AddTag", AddTag_args },
            { "RmTag", RmTag_args },
            { "GetTagNames", GetTagNames_args },
            { "GetTagSizes", GetTagSizes_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod TagDB_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty TagDB_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface TagDB_adaptor_interface = 
        {
            "com.ross.XTagRev.TagDB",
            TagDB_adaptor_methods,
            TagDB_adaptor_signals,
            TagDB_adaptor_properties
        };
        return &TagDB_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void AddTag(const std::string& tagname) = 0;
    virtual void RmTag(const std::string& tagname) = 0;
    virtual std::vector< std::string > GetTagNames() = 0;
    virtual std::vector< std::string > GetTagSizes() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _AddTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        AddTag(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _RmTag_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        RmTag(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetTagNames_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = GetTagNames();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetTagSizes_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = GetTagSizes();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } 
#endif//__dbusxx__server_glue_h__ADAPTOR_MARSHAL_H
